package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"crypto/rand"
	"fmt"
	"forum/internal/graph/model"
	"math/big"
	"time"
)

func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(99))
	post := &model.Post{
		ID:              fmt.Sprintf("id-%d", randNumber),
		Title:           input.Title,
		Content:         input.Content,
		Author:          input.Author,
		CommentsEnabled: input.CommentsEnabled,
		CreatedAt:       time.Now(),
	}
	err := r.ResolverStorage.CreatePost(ctx, post)
	if err != nil {
		return nil, err
	}
	return post, nil
}

func (r *mutationResolver) DisableComments(ctx context.Context, postID string) (bool, error) {
	err := r.ResolverStorage.DisableComments(ctx, postID)
	if err != nil {
		return true, err
	}
	return false, nil
}

func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(99))
	comment := &model.Comment{
		ID:        fmt.Sprintf("%s-%d", input.PostID, randNumber),
		PostID:    input.PostID,
		ParentID:  input.ParentID,
		Author:    input.Author,
		Content:   input.Content,
		CreatedAt: time.Now(),
	}
	err := r.ResolverStorage.CreateComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	r.mu.Lock()
	for idString, subStorageChan := range r.SubStorage {
		if input.PostID == idString[1] {
			subStorageChan <- comment
		}
	}
	r.mu.Unlock()

	return comment, nil
}

func (r *queryResolver) Posts(ctx context.Context, limit int32, offset int32) ([]*model.Post, error) {
	posts, err := r.ResolverStorage.ListPosts(ctx, int(limit), int(offset))
	if err != nil {
		return nil, err
	}
	return posts, nil
}

func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.ResolverStorage.GetPost(ctx, id)
	if err != nil {
		return nil, err
	}
	return post, nil
}

func (r *queryResolver) Comments(ctx context.Context, postID string, limit int32, offset int32) (*model.PostWithComments, error) {
	post, err := r.ResolverStorage.GetPost(ctx, postID)
	if err != nil {
		return nil, err
	}
	comments, err := r.ResolverStorage.GetCommentsByPost(ctx, postID, 0, 0)
	if err != nil {
		return nil, err
	}
	return &model.PostWithComments{Post: post, Comments: comments}, nil
}

func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(99))
	idNum := fmt.Sprintf("sub-%d", randNumber)
	idString := [2]string{idNum, postID}
	msgs := make(chan *model.Comment, 1)
	go func() {
		<-ctx.Done()
		r.mu.Lock()
		delete(r.SubStorage, idString)
		r.mu.Unlock()
	}()
	r.mu.Lock()
	r.SubStorage[idString] = msgs
	r.mu.Unlock()
	return msgs, nil
}

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
